name: Deploy Magic Seedbox

on:
  workflow_dispatch:
    inputs:
      domain:
        description: "Your base domain"
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get install -y jq

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.5 # Explicit version

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      
      - name: List Terraform Files
        run: ls -la terraform/  # Verify credentials file exists
        
      - name: Validate Terraform Configuration
        run: |
          cd terraform
          terraform validate

      - name: Validate GCP Credentials
        run: |
          cd terraform
          printf '%s' '${{ secrets.GCP_SA_KEY }}' | base64 -d > gcp_credentials.json
          jq -e . gcp_credentials.json || (echo "Invalid JSON"; exit 1)
          gcloud auth activate-service-account --key-file=gcp_credentials.json
          gcloud config set project ${{ vars.GCP_PROJECT }}
          gcloud compute instances list --format=json

      - name: Terraform Apply
        run: |
          cd terraform
          export TF_LOG=DEBUG
          terraform apply -auto-approve
        env:
          TF_VAR_gcp_project: "${{ vars.GCP_PROJECT }}"
          TF_VAR_cloudflare_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_domain: "${{ inputs.domain }}"
          TF_VAR_gcp_credentials_file: "gcp_credentials.json"
      
      - name: Get VM IP
        id: vm-ip
        run: |
          cd terraform
          echo "ip=$(terraform output -raw vm_ip)" >> $GITHUB_OUTPUT

      - name: Update DNS
        run: |
          cd ..
          ./scripts/cloudflare-dns.sh ${{ steps.vm-ip.outputs.ip }} ${{ inputs.domain }}
        env:
          CF_ZONE_ID: "${{ secrets.CF_ZONE_ID }}"
          CLOUDFLARE_TOKEN: "${{ secrets.CLOUDFLARE_API_TOKEN }}"

      - name: Destroy on Failure
        if: failure()
        run: |
          cd terraform
          printf '%s' '${{ secrets.GCP_SA_KEY }}' | base64 -d > gcp_credentials.json
          terraform destroy -auto-approve
        env:
          TF_VAR_gcp_project: "${{ vars.GCP_PROJECT }}"
          TF_VAR_cloudflare_token: "${{ secrets.CLOUDFLARE_API_TOKEN }}"
          TF_VAR_domain: "${{ inputs.domain }}"
          TF_VAR_gcp_credentials_file: "gcp_credentials.json"

      - name: Cleanup Credentials
        if: always()
        run: rm -f terraform/gcp_credentials.json  # Now runs AFTER destroy